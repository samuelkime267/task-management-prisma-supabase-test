// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  tasks         Tasks[]

  @@map("users")
}

enum TaskStatus {
  Todo
  InProgress
  Done
}

model Tasks {
  id          String     @id @default(cuid())
  title       String
  Description String?
  subTasks    SubTask[]
  status      TaskStatus @default(Todo)
  dueAt       DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model SubTask {
  id          String   @id @default(cuid())
  Title       String
  Description String
  isCompleted Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  taskId String
  author Tasks  @relation(fields: [taskId], references: [id])
}
